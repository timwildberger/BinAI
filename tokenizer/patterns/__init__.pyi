from typing import List, Optional, Any, Union, ForwardRef

import tokenizer
from .matcher import TokenPattern


class PatternParseBase:
    def __add__(self, other) -> Any: ...
    def __or__(self, other) -> Any: ...

class PatternParseResult:
    def __init__(self, parsed, end) -> Any: ...
    def __add__(self, other) -> Any: ...
    def _finish_section(self, constructed) -> Any: ...
    def finalize(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class PatternSinglet:
    def __init__(self, cls, value) -> Any: ...
    def to_pattern_elem(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...


TokenPatternType: Union[PatternSinglet, PatternParseResult, List[ForwardRef('TokenPatternType')]]

# class TokenPattern:
#     def __init__(self, *pattern: TokenPatternType): ...
#     def match_throw(self, token_iter: Iterator[tokenizer.tokens.Tokens], vocab_manager: Optional[tokenizer.token_manager.VocabularyManager] = None, trace=False): ...
#     def match(self, token_iter: Iterator[tokenizer.tokens.Tokens], vocab_manager: Optional[tokenizer.token_manager.VocabularyManager] = None, trace=False) -> bool: ...
#     def get_error(self) -> Optional[tokenizer.patterns.engine.PatternMatchError]: ...
#     def get_trace(self) -> Optional[List[str]]: ...
#     def __str__(self) -> str: ...
#     def __repr__(self) -> str: ...

Block: PatternParseBase
BlockDef: PatternParseBase
Error: PatternParseBase
IdentifierLiteral: PatternParseBase
InsnAgnostic: PatternParseBase
InsnArithmetic: PatternParseBase
InsnBitManipulation: PatternParseBase
InsnControlFlow: PatternParseBase
InsnFloaringPoint: PatternParseBase
InsnKernelInteraction: PatternParseBase
InsnLockingAtomic: PatternParseBase
InsnMemoryAccessMode: PatternParseBase
InsnNop: PatternParseBase
InsnOther: PatternParseBase
InsnPointerLengths: PatternParseBase
InsnPrefixes: PatternParseBase
InsnStrings: PatternParseBase
InsnSystem: PatternParseBase
Lookahead: PatternParseBase
Maybe: PatternParseBase
MemCloseBracket: PatternParseBase
MemMinus: PatternParseBase
MemMultiply: PatternParseBase
MemOpenBracket: PatternParseBase
MemPlus: PatternParseBase
MemoryOperand: PatternParseBase
Multi: PatternParseBase
OpaqueConst: PatternParseBase
Platform: PatternParseBase
TokenSet: PatternParseBase
Unresolved: PatternParseBase
ValuedConst: PatternParseBase
def listToPatternParseResult(list_: List[TokenPatternType]) -> Union[PatternParseResult, NotImplemented]: ...